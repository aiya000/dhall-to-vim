Describe Dhall
  Before all
    let Dhall = vital#vital#import('Dhall')
  End

  Context primitive
    It natural numbers
      Assert Equals(Dhall.parse('10'), 10)
    End

    It integers
      Assert Equals(Dhall.parse('+10'), +10)
      Assert Equals(Dhall.parse('-10'), -10)
    End

    It double float numbers
      Assert Equals(Dhall.parse('1.0'), 1.0)
    End

    It texts
      Assert Equals(Dhall.parse('"xxx"'), 'xxx')
    End

    It booleans
      Assert Equals(Dhall.parse('True'), v:true)
      Assert Equals(Dhall.parse('False'), v:false)
    End

    It records
      Assert Equals(Dhall.parse('{}'), {})
      Assert Equals(Dhall.parse('{foo = 10}'), {foo: 10})
      Assert Equals(Dhall.parse('{foo = 10, bar = 20}'), {foo: 10, bar: 20})
      Assert Equals(Dhall.parse('{foo = {bar = {}}}'), {foo: {bar: {}}})
    End

    It lists
      Assert Equals(Dhall.parse('[]'), [])
      Assert Equals(Dhall.parse('[10]'), [10])
      Assert Equals(Dhall.parse('[1, 2, 3]'), [1, 2, 3])
    End

    It type specifications
      Assert Equals(
        \ Dhall.parse('10 : Natural'),
        \ Dhall.type(10, Dhall.type_nat))

      Assert Equals(
        \ Dhall.parse('+10 : Integer'),
        \ Dhall.type(+10, Dhall.type_int))

      Assert Equals(
        \ Dhall.parse('1.0 : Double'),
        \ Dhall.type(1.0, Dhall.type_double))

      Assert Equals(
        \ Dhall.parse('"10" : Text'),
        \ Dhall.type('10', Dhall.type_text))

      Assert Equals(
        \ Dhall.parse('True : Bool'),
        \ Dhall.type(v:true, Dhall.type_bool))

      Assert Equals(
        \ Dhall.parse('[10] : List Natural'),
        \ Dhall.type([10], Dhall.type_list(Dhall.type_nat)))

      Assert Equals(
        \ Dhall.parse('{foo = 10} : {foo : Natural}'),
        \ Dhall.type({foo: 10}, Dhall.type_record({foo: Dhall.type_nat})))
    End

    It unions
      " Vim has the record idion, but doesn't have union idiom.
      " Dhall.union_term is instead of it.

      Assert Equals(
        \ Dhall.parse('<>'),
        \ Dhall.union())

      Assert Equals(
        \ Dhall.parse('<Foo = 10>'),
        \ Dhall.union(Dhall.union_term('Foo', 10)))

      Assert Equals(
        \ Dhall.parse('<Foo : Natural>'),
        \ Dhall.union(Dhall.union_term('Foo', Dhall.type_nat)))

      Assert Equals(
        \ Dhall.parse('<Foo = 10 | Bar : Natural>'),
        \ Dhall.union(
          \ Dhall.union_term('Foo', 10),
          \ Dhall.union_term('Bar', Dhall.type_nat)))

      Assert Equals(
        \ Dhall.parse('<You = <Me = 10>>'),
        \ Dhall.union(Dhall.union_term('You',
          \ Dhall.union(Dhall.union_term('Me', 10)))))

      Assert Equals(
        \ Dhall.parse('<Foo = 10> : <Foo : Natural>'),
        \ Dhall.type(
          \ Dhall.union(Dhall.union_term('Foo', 10)),
          \ Dhall.type_union(
            \ Dhall.union_term('Foo', Dhall.type_nat))))
    End

    It optionals
      Assert Equals(
        \ Dhall.parse('[] : Optional Natural'),
        \ Dhall.type([], Dhall.type_opt(Dhall.type_nat)))

      Assert Equals(
        \ Dhall.parse('[10] : Optional Natural'),
        \ Dhall.type([10], Dhall.type_opt(Dhall.type_nat)))
    End
  End

  Context syntax
    It operators
      Assert Equals(
        \ Dhall.parse('True || False'),
        \ Dhall.op('||', v:true, v:false))
    End

    It if
      Assert Equals(
        \ Dhall.parse('if True then 10 else 20'),
        \ Dhall.if(v:true, 10, 20))
    End
  End
End
